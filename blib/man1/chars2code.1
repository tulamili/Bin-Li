.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CHARS2CODE 1"
.TH CHARS2CODE 1 "2021-05-25" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.ie n .SH "$0"
.el .SH "\f(CW$0\fP"
.IX Header "$0"
(utf8とみなして) 入力データをひとつひとつの文字にばらして、符号位置を表し足り、頻度を数えたりする。
.PP
[オプション]
 \-b : utf8ではなくてバイト単位で処理する。
 \-u : 0x 表記ではなく u+ で表示。バイナリで無くて、ユニコードの区点番号となる。
 \-1 : 入力を1文字ずつ出力1行に反映。
 \-: ; 文字の位置を表示
 \-0 : いろいろな位置を表すのに、1始まりではなくて、0始まりにする。
 \-n : 各文字の頻度を数える。
.PP
[用途]
 * 頻出する文字を知る。
 *  よく似た2行がどこに違いがあるのか見つけたいときに、sdiff で並べる操作の前に使う。
.PP
[開発上のメモ]
 * grep \-o . と同じ程度の処理速度があるだろうか。
 * 頻度の多い順に表示されているが、表示順を選べるようにオプションを作りたい。
 * 最初の出現順でまずは格納したいかも。
 * freq, code-point, [normalized\-char] 等を先頭に出力すべし。
 * 最初の出現位値, 最後の出現位値も出力したい。
 * 非常に長い行を読むときに、途中で結果を表示するようにしたい。
.PP
.Vb 1
\& * このプログラムの名前の候補としてはordcharsとか ordutf8とか  utf8ord を考えたが、2019\-10\-16にchars2code とした。
.Ve
