.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "GZPASTE 1"
.TH GZPASTE 1 "2021-05-25" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH ""
.IX Header ""
.Vb 1
\& $0  some1.gz  some2.gz ... 
\&
\&  Unixの paste のように、複数のファイルの各行を横に並べる。
\&
\& オプション: 
\&   \-d str : 出力の区切り文字
\&   \-g ; gzcat コマンドを使ってファイルを読み取るようにする。PerlIO::gzip を読取りに使わない。
\&
\&   \-r : 入力の改行が "\er\en" を仮定する。(出力は "\en" のまま。)
\&   \-t num : gzファイルが読み取れない場合に何回繰り返して読み取るか。(tolerance)
\&   \-3 : 秒数の表示を小数点以下3桁にする。
\&   \-! ; 出力をバッファに貯めない。
\&
\& 環境変数 :
\&    $osep : 出力の区切り文字しとして使われるが、\-d str で指定すると上書きされる。
\&
\& 利用例: 
\&     $0 \-d , file1 file2 file3  # \-d で出力区切り文字を指定している。
\&     osep=, $0 file1 file2 file3  # 環境変数を出力区切り文字を指定している。
\&
\& 注意点 ; 
\&    gzip 圧縮をしたファイルを複数、単純に連結(concat, cat)しても、gzcat では問題無いが
\&    PerlIO::gzipでは問題が起こる。連結時の最初のファイルを読み終わった後、次を読むことができない。
\&
\& =cut
.Ve
