.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SAMPLER 1"
.TH SAMPLER 1 "2021-05-25" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.ie n .SH " $0"
.el .SH " \f(CW$0\fP"
.IX Header " $0"
.Vb 6
\& \-r N : 抽出確率を指定。0.1 や 1e\-2 など指定する。0.5 がデフォルトの値。\*(Aq1/3\*(Aq のような分数も対応。
\& \-k N : 1始まりの列番号を指定することで、その数を \-r で指定された数に乗じた数が抽出確率になる。
\& \-:   ; 何番目かのデータであるかを付加して表示される。( \-= でヘッダ仮定があれば、2行目を1とする。)
\& \-q    ; 標準エラー出力に出すことになっている出力行数や乱数シードの情報を出力しない。
\& \-u num ; \-kの指定がある場合に、その列の値が num 以下のみであれば、出力の対象となる。
\& \-v その行の抽出確率の指定値が、行の末尾に表示される。
\&
\& \-R   : 復元抽出するように抽出する。ある意味において、二項分布をうまくシュミレートする。
\& \-V   : 確率的抽出動作はしない。単に各行の末尾に抽出指定値を付加する。
\& \-x N : 各行の抽出確率を出力する際に、数字を見やすくするために、N倍したものを出力する。
\& \-= 入力の最初の1行目はそのまま出力し、ランダム抽出の対象とはしない。
\& \-/ str  : 入力の区切り文字をstr で指定する。未指定ならタブ文字。
\& \-. str  : 出力の区切り文字をstr で指定する。未指定ならタブ文字。
\& 
\& [用途と使い方]
\&
\& 標準入力の各行を、指定された確率で、標準出力に書き出す。
\& 出力において順番の入れ替えはしない。
\&
\&  $0 \-r 1e\-2
\&
\&   # 標準入力の各行を100個に1個出力。
\&
\&  $0 \-r (rate) \-k (key)
\&
\& # 各行の抽出確率が タブ区切り key 列目(1始まり)の値の数 を
\& # rate にかけ算した数になる。
\&
\& [注意点]
\&
\& 各行の抽出確率r の値が0以上1以下の数でない場合の処理について:
\&  r>1 の場合は、まずint(r)回同じ行を書き出し、そして、r\-int(r)の確率で1回出力する。
\&  r<0 の場合は、何も出力をしない。
\& このようにすることで、各行が抽出される回数の期待値が、r>0の場合に r回となる。
.Ve
